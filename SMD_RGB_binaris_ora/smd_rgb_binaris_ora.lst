

HI-TECH Software PIC PRO Macro Assembler V9.71a build 6446 
                                                                                               Tue Apr 14 11:10:06 2015

HI-TECH Software Omniscient Code Generator (PRO mode) build 6446
     1                           	processor	16F628
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	text231,local,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,delta=2
    12                           	psect	text232,local,class=CODE,delta=2
    13                           	psect	text233,local,class=CODE,delta=2
    14                           	psect	text234,local,class=CODE,delta=2
    15                           	psect	text235,local,class=CODE,delta=2
    16                           	psect	text236,local,class=CODE,delta=2
    17                           	psect	text237,local,class=CODE,delta=2
    18                           	psect	text238,local,class=CODE,delta=2
    19                           	psect	text239,local,class=CODE,delta=2
    20                           	psect	intentry,global,class=CODE,delta=2
    21                           	psect	text240,local,class=CODE,delta=2
    22                           	psect	pa_nodes,global,class=CODE,delta=2
    23                           	dabs	1,0x7E,2
    24  000A                     	;#
    25                           
    26                           	psect	config
    27  2007  3F01               	dw	16129	;#
    28                           
    29                           	psect	text231
    30  0000                     __ptext231:	
    31  0017                     _CCP1CON	set	23
    32  001F                     _CMCON	set	31
    33  000B                     _INTCON	set	11
    34  0006                     _PORTB	set	6
    35  0012                     _T2CON	set	18
    36  005F                     _GIE	set	95
    37  005E                     _PEIE	set	94
    38  0028                     _RA0	set	40
    39  0029                     _RA1	set	41
    40  002A                     _RA2	set	42
    41  002B                     _RA3	set	43
    42  002D                     _RA5	set	45
    43  0037                     _RB7	set	55
    44  0061                     _TMR2IF	set	97
    45  0092                     _PR2	set	146
    46  0085                     _TRISA	set	133
    47  0086                     _TRISB	set	134
    48  0461                     _TMR2IE	set	1121
    49                           
    50                           	psect	cinit
    51  0311                     start_initialization:	
    52                           
    53                           ; Clear objects allocated to COMMON
    54  0311  01FA               	clrf	__pbssCOMMON& (0+127)
    55  0312  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
    56                           
    57                           ; Clear objects allocated to BANK0
    58  0313  01BF               	clrf	__pbssBANK0& (0+127)
    59  0314  01C0               	clrf	(__pbssBANK0+1)& (0+127)
    60  0315  01C1               	clrf	(__pbssBANK0+2)& (0+127)
    61  0316  01C2               	clrf	(__pbssBANK0+3)& (0+127)
    62  0317  01C3               	clrf	(__pbssBANK0+4)& (0+127)
    63  0318  01C4               	clrf	(__pbssBANK0+5)& (0+127)
    64  0319  01C5               	clrf	(__pbssBANK0+6)& (0+127)
    65  031A  01C6               	clrf	(__pbssBANK0+7)& (0+127)
    66  031B  01C7               	clrf	(__pbssBANK0+8)& (0+127)
    67  031C  01C8               	clrf	(__pbssBANK0+9)& (0+127)
    68  031D  01C9               	clrf	(__pbssBANK0+10)& (0+127)
    69  031E                     end_of_initialization:	
    70                           ;End of C runtime variable initialization code
    71                           
    72  031E  0183               	clrf	3
    73  031F  280B               	ljmp	_main	;jump to C main() function
    74                           
    75                           	psect	bssCOMMON
    76  007A                     __pbssCOMMON:	
    77  007A                     _timer_count:	
    78  007A                     	ds	2
    79                           
    80                           	psect	bssBANK0
    81  003F                     __pbssBANK0:	
    82  003F                     _randx:	
    83  003F                     	ds	4
    84  0043                     _mp_1:	
    85  0043                     	ds	1
    86  0044                     _mp_10:	
    87  0044                     	ds	1
    88  0045                     _ora_1:	
    89  0045                     	ds	1
    90  0046                     _ora_10:	
    91  0046                     	ds	1
    92  0047                     _perc_1:	
    93  0047                     	ds	1
    94  0048                     _perc_10:	
    95  0048                     	ds	1
    96  0049                     _randf:	
    97  0049                     	ds	1
    98                           
    99                           	psect	cstackCOMMON
   100  0070                     __pcstackCOMMON:	
   101  0070                     ?_init_setup:	
   102  0070                     ??_isr:	
   103                           ; 0 bytes @ 0x0
   104                           
   105  0070                     ?_main:	
   106                           ; 0 bytes @ 0x0
   107                           
   108  0070                     ?_isr:	
   109                           ; 0 bytes @ 0x0
   110                           
   111                           
   112                           ; 2 bytes @ 0x0
   113  0070                     	ds	2
   114  0072                     ??_init_setup:	
   115  0072                     ?_SR74HC595:	
   116                           ; 0 bytes @ 0x2
   117                           
   118  0072                     ?_srand:	
   119                           ; 0 bytes @ 0x2
   120                           
   121  0072                     ?___lmul:	
   122                           ; 0 bytes @ 0x2
   123                           
   124  0072                     SR74HC595@szin:	
   125                           ; 4 bytes @ 0x2
   126                           
   127  0072                     srand@x:	
   128                           ; 2 bytes @ 0x2
   129                           
   130  0072                     ___lmul@multiplier:	
   131                           ; 2 bytes @ 0x2
   132                           
   133                           
   134                           ; 4 bytes @ 0x2
   135  0072                     	ds	2
   136  0074                     ??_SR74HC595:	
   137  0074                     ??_srand:	
   138                           ; 0 bytes @ 0x4
   139                           
   140                           
   141                           ; 0 bytes @ 0x4
   142  0074                     	ds	1
   143  0075                     SR74HC595@shift:	
   144                           
   145                           ; 1 bytes @ 0x5
   146  0075                     	ds	1
   147  0076                     SR74HC595@ADAT:	
   148  0076                     ___lmul@multiplicand:	
   149                           ; 1 bytes @ 0x6
   150                           
   151                           
   152                           ; 4 bytes @ 0x6
   153  0076                     	ds	1
   154  0077                     SR74HC595@i:	
   155                           
   156                           ; 1 bytes @ 0x7
   157  0077                     	ds	3
   158  007A                     ??_random_szam:	
   159  007A                     ??___lmul:	
   160                           ; 0 bytes @ 0xA
   161                           
   162  007A                     ??___awmod:	
   163                           ; 0 bytes @ 0xA
   164                           
   165                           
   166                           	psect	cstackBANK0
   167  0020                     __pcstackBANK0:	
   168                           ; 0 bytes @ 0xA
   169                           
   170  0020                     ___lmul@product:	
   171                           
   172                           ; 4 bytes @ 0x0
   173  0020                     	ds	4
   174  0024                     ?___awmod:	
   175  0024                     ___awmod@divisor:	
   176                           ; 2 bytes @ 0x4
   177                           
   178                           
   179                           ; 2 bytes @ 0x4
   180  0024                     	ds	2
   181  0026                     ___awmod@dividend:	
   182                           
   183                           ; 2 bytes @ 0x6
   184  0026                     	ds	2
   185  0028                     ___awmod@counter:	
   186                           
   187                           ; 1 bytes @ 0x8
   188  0028                     	ds	1
   189  0029                     ___awmod@sign:	
   190                           
   191                           ; 1 bytes @ 0x9
   192  0029                     	ds	1
   193  002A                     ?_rand:	
   194                           
   195                           ; 2 bytes @ 0xA
   196  002A                     	ds	2
   197  002C                     ??_rand:	
   198                           
   199                           ; 0 bytes @ 0xC
   200  002C                     	ds	4
   201  0030                     ?_random_szam:	
   202  0030                     random_szam@mettol:	
   203                           ; 2 bytes @ 0x10
   204                           
   205                           
   206                           ; 2 bytes @ 0x10
   207  0030                     	ds	2
   208  0032                     random_szam@meddig:	
   209                           
   210                           ; 2 bytes @ 0x12
   211  0032                     	ds	2
   212  0034                     ??_main:	
   213                           
   214                           ; 0 bytes @ 0x14
   215  0034                     	ds	7
   216  003B                     _main$216:	
   217                           
   218                           ; 2 bytes @ 0x1B
   219  003B                     	ds	2
   220  003D                     main@i:	
   221                           
   222                           ; 1 bytes @ 0x1D
   223  003D                     	ds	1
   224  003E                     main@randszam:	
   225                           
   226                           ; 1 bytes @ 0x1E
   227  003E                     	ds	1
   228                           
   229                           	psect	maintext
   230  000B                     __pmaintext:	
   231 ;;Data sizes: Strings 0, constant 0, data 0, bss 13, persistent 0 stack 0
   232 ;;Auto spaces:   Size  Autos    Used
   233 ;; COMMON          14     10      12
   234 ;; BANK0           80     31      42
   235 ;; BANK1           80      0       0
   236 ;; BANK2           48      0       0
   237 ;;
   238 ;; Pointer list with targets:
   239 ;; ?_rand	int  size(1) Largest target is 0
   240 ;;
   241 ;; ?___lmul	unsigned long  size(1) Largest target is 0
   242 ;;
   243 ;; ?___awmod	int  size(1) Largest target is 0
   244 ;;
   245 ;; ?_random_szam	unsigned int  size(1) Largest target is 0
   246 ;;
   247 ;;
   248 ;; Critical Paths under _main in COMMON
   249 ;;
   250 ;;   _rand->___lmul
   251 ;;   ___awmod->___lmul
   252 ;;
   253 ;; Critical Paths under _isr in COMMON
   254 ;;
   255 ;;   None.
   256 ;;
   257 ;; Critical Paths under _main in BANK0
   258 ;;
   259 ;;   _main->_random_szam
   260 ;;   _random_szam->_rand
   261 ;;   _rand->___awmod
   262 ;;   ___awmod->___lmul
   263 ;;
   264 ;; Critical Paths under _isr in BANK0
   265 ;;
   266 ;;   None.
   267 ;;
   268 ;; Critical Paths under _main in BANK1
   269 ;;
   270 ;;   None.
   271 ;;
   272 ;; Critical Paths under _isr in BANK1
   273 ;;
   274 ;;   None.
   275 ;;
   276 ;; Critical Paths under _main in BANK2
   277 ;;
   278 ;;   None.
   279 ;;
   280 ;; Critical Paths under _isr in BANK2
   281 ;;
   282 ;;   None.
   283 ;;
   284 ;;Main: autosize = 0, tempsize = 7, incstack = 0, save=0
   285 ;;
   286 ;;
   287 ;;Call Graph Tables:
   288 ;;
   289 ;; ---------------------------------------------------------------------------------
   290 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   291 ;; ---------------------------------------------------------------------------------
   292 ;; (0) _main                                                11    11      0    1634
   293 ;;                                             20 BANK0     11    11      0
   294 ;;                         _init_setup
   295 ;;                        _random_szam
   296 ;;                          _SR74HC595
   297 ;; ---------------------------------------------------------------------------------
   298 ;; (1) _random_szam                                          4     0      4     640
   299 ;;                                             16 BANK0      4     0      4
   300 ;;                               _rand
   301 ;;                            ___awmod
   302 ;; ---------------------------------------------------------------------------------
   303 ;; (2) _rand                                                 6     4      2     114
   304 ;;                                             10 BANK0      6     4      2
   305 ;;                              _srand
   306 ;;                             ___lmul
   307 ;;                            ___awmod (ARG)
   308 ;; ---------------------------------------------------------------------------------
   309 ;; (2) ___awmod                                              6     2      4     433
   310 ;;                                              4 BANK0      6     2      4
   311 ;;                              _srand (ARG)
   312 ;;                             ___lmul (ARG)
   313 ;; ---------------------------------------------------------------------------------
   314 ;; (3) ___lmul                                              12     4      8      92
   315 ;;                                              2 COMMON     8     0      8
   316 ;;                                              0 BANK0      4     4      0
   317 ;; ---------------------------------------------------------------------------------
   318 ;; (3) _srand                                                2     0      2      22
   319 ;;                                              2 COMMON     2     0      2
   320 ;; ---------------------------------------------------------------------------------
   321 ;; (1) _SR74HC595                                            6     4      2     291
   322 ;;                                              2 COMMON     6     4      2
   323 ;; ---------------------------------------------------------------------------------
   324 ;; (1) _init_setup                                           0     0      0       0
   325 ;; ---------------------------------------------------------------------------------
   326 ;; Estimated maximum stack depth 3
   327 ;; ---------------------------------------------------------------------------------
   328 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   329 ;; ---------------------------------------------------------------------------------
   330 ;; (4) _isr                                                  2     2      0       0
   331 ;;                                              0 COMMON     2     2      0
   332 ;; ---------------------------------------------------------------------------------
   333 ;; Estimated maximum stack depth 4
   334 ;; ---------------------------------------------------------------------------------
   335 ;; Call Graph Graphs:
   336 ;; _main (ROOT)
   337 ;;   _init_setup
   338 ;;   _random_szam
   339 ;;     _rand
   340 ;;       _srand
   341 ;;       ___lmul
   342 ;;       ___awmod (ARG)
   343 ;;         _srand (ARG)
   344 ;;         ___lmul (ARG)
   345 ;;     ___awmod
   346 ;;       _srand (ARG)
   347 ;;       ___lmul (ARG)
   348 ;;   _SR74HC595
   349 ;;
   350 ;; _isr (ROOT)
   351 ;;
   352 ;; Address spaces:
   353 ;;Name               Size   Autos  Total    Cost      Usage
   354 ;;BITCOMMON            E      0       0       0        0.0%
   355 ;;EEDATA              80      0       0       0        0.0%
   356 ;;NULL                 0      0       0       0        0.0%
   357 ;;CODE                 0      0       0       0        0.0%
   358 ;;COMMON               E      A       C       1       85.7%
   359 ;;BITSFR0              0      0       0       1        0.0%
   360 ;;SFR0                 0      0       0       1        0.0%
   361 ;;BITSFR1              0      0       0       2        0.0%
   362 ;;SFR1                 0      0       0       2        0.0%
   363 ;;STACK                0      0       3       2        0.0%
   364 ;;BANK0               50     1F      2A       3       52.5%
   365 ;;BITSFR3              0      0       0       4        0.0%
   366 ;;SFR3                 0      0       0       4        0.0%
   367 ;;ABS                  0      0      36       4        0.0%
   368 ;;BITBANK0            50      0       0       5        0.0%
   369 ;;BITSFR2              0      0       0       5        0.0%
   370 ;;SFR2                 0      0       0       5        0.0%
   371 ;;BITBANK1            50      0       0       6        0.0%
   372 ;;BANK1               50      0       0       7        0.0%
   373 ;;BITBANK2            30      0       0       8        0.0%
   374 ;;BANK2               30      0       0       9        0.0%
   375 ;;DATA                 0      0      39      10        0.0%
   376                           
   377                           
   378 ;; *************** function _main *****************
   379 ;; Defined at:
   380 ;;		line 89 in file "C:\Users\DPTP\Dropbox\PIC_Programozas\P16F628\SMD_RGB_binaris_ora\main.c"
   381 ;; Parameters:    Size  Location     Type
   382 ;;		None
   383 ;; Auto vars:     Size  Location     Type
   384 ;;  randszam        1   30[BANK0 ] unsigned char 
   385 ;;  i               1   29[BANK0 ] unsigned char 
   386 ;; Return value:  Size  Location     Type
   387 ;;		None               void
   388 ;; Registers used:
   389 ;;		wreg, status,2, status,0, pclath, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 17F/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   395 ;;      Params:         0       0       0       0
   396 ;;      Locals:         0       4       0       0
   397 ;;      Temps:          0       7       0       0
   398 ;;      Totals:         0      11       0       0
   399 ;;Total ram usage:       11 bytes
   400 ;; Hardware stack levels required when called:    4
   401 ;; This function calls:
   402 ;;		_init_setup
   403 ;;		_random_szam
   404 ;;		_SR74HC595
   405 ;; This function is called by:
   406 ;;		Startup code after reset
   407 ;; This function uses a non-reentrant model
   408 ;;
   409  000B                     _main:	
   410                           
   411                           ;main.c: 90: unsigned char i, randszam;
   412                           ;main.c: 92: init_setup();
   413                           
   414                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   415  000B  22FA               	fcall	_init_setup
   416  000C                     l1433:	
   417                           
   418                           ;main.c: 96: if(RA2==0){
   419  000C  1283               	bcf	3,5	;RP0=0, select bank0
   420  000D  1303               	bcf	3,6	;RP1=0, select bank0
   421  000E  1905               	btfsc	5,2
   422  000F  281F               	goto	l363
   423  0010                     l364:	
   424  0010  1D05               	btfss	5,2
   425  0011  2810               	goto	l364
   426                           
   427                           ;main.c: 98: perc_1++;
   428  0012  0AC7               	incf	_perc_1,f
   429                           
   430                           ;main.c: 99: if(perc_1==10){
   431  0013  0847               	movf	_perc_1,w
   432  0014  3A0A               	xorlw	10
   433  0015  1D03               	skipz
   434  0016  2834               	goto	l1465
   435                           
   436                           ;main.c: 100: perc_1 = 0;
   437  0017  01C7               	clrf	_perc_1
   438                           
   439                           ;main.c: 101: perc_10++;
   440  0018  0AC8               	incf	_perc_10,f
   441                           
   442                           ;main.c: 102: if(perc_10==6){
   443  0019  0848               	movf	_perc_10,w
   444  001A  3A06               	xorlw	6
   445  001B  1D03               	skipz
   446  001C  2834               	goto	l1465
   447                           
   448                           ;main.c: 103: perc_10 = 0;
   449  001D  01C8               	clrf	_perc_10
   450  001E  2834               	goto	l1465
   451  001F                     l363:	
   452  001F  1A85               	btfsc	5,5
   453  0020  2834               	goto	l1465
   454  0021                     l371:	
   455  0021  1E85               	btfss	5,5
   456  0022  2821               	goto	l371
   457                           
   458                           ;main.c: 108: ora_1++;
   459  0023  0AC5               	incf	_ora_1,f
   460                           
   461                           ;main.c: 109: if(ora_1==10){
   462  0024  0845               	movf	_ora_1,w
   463  0025  3A0A               	xorlw	10
   464  0026  1D03               	skipz
   465  0027  2834               	goto	l1465
   466                           
   467                           ;main.c: 110: ora_1 = 0;
   468  0028  01C5               	clrf	_ora_1
   469                           
   470                           ;main.c: 111: ora_10++;
   471  0029  0AC6               	incf	_ora_10,f
   472                           
   473                           ;main.c: 112: if(ora_10==2 & ora_1==4){
   474  002A  0846               	movf	_ora_10,w
   475  002B  3A02               	xorlw	2
   476  002C  1D03               	skipz
   477  002D  2834               	goto	l1465
   478  002E  0845               	movf	_ora_1,w
   479  002F  3A04               	xorlw	4
   480  0030  1D03               	skipz
   481  0031  2834               	goto	l1465
   482                           
   483                           ;main.c: 113: ora_1 = 0;
   484  0032  01C5               	clrf	_ora_1
   485                           
   486                           ;main.c: 114: ora_10 = 0;
   487  0033  01C6               	clrf	_ora_10
   488  0034                     l1465:	
   489                           
   490                           ;main.c: 115: }
   491                           ;main.c: 116: }
   492                           ;main.c: 117: }
   493                           ;main.c: 119: if(mp_1==0){
   494  0034  08C3               	movf	_mp_1,f
   495  0035  1D03               	skipz
   496  0036  2840               	goto	l1469
   497                           
   498                           ;main.c: 120: randszam = random_szam(1,3);
   499  0037  01B0               	clrf	?_random_szam
   500  0038  0AB0               	incf	?_random_szam,f
   501  0039  01B1               	clrf	?_random_szam+1
   502  003A  3003               	movlw	3
   503  003B  00B2               	movwf	?_random_szam+2
   504  003C  01B3               	clrf	?_random_szam+3
   505  003D  22DE               	fcall	_random_szam
   506  003E  0830               	movf	?_random_szam,w
   507  003F  00BE               	movwf	main@randszam
   508  0040                     l1469:	
   509                           
   510                           ;main.c: 121: }
   511                           ;main.c: 122: PORTB = 0xFE;
   512  0040  30FE               	movlw	254
   513  0041  0086               	movwf	6	;volatile
   514                           
   515                           ;main.c: 123: for(i=0; i<6; i++){
   516  0042  01BD               	clrf	main@i
   517  0043                     l1477:	
   518                           
   519                           ;main.c: 125: PORTB = i==0 ? PORTB : (PORTB<<1)|1;
   520  0043  0806               	movf	6,w	;volatile
   521  0044  00BB               	movwf	_main$216
   522  0045  01BC               	clrf	_main$216+1
   523  0046  1003               	clrc
   524  0047  0DBB               	rlf	_main$216,f
   525  0048  0DBC               	rlf	_main$216+1,f
   526  0049  143B               	bsf	_main$216,0
   527  004A  08BD               	movf	main@i,f
   528  004B  1D03               	skipz
   529  004C  2850               	goto	l380
   530  004D  0806               	movf	6,w	;volatile
   531  004E  00BB               	movwf	_main$216
   532  004F  01BC               	clrf	_main$216+1
   533  0050                     l380:	
   534  0050  083B               	movf	_main$216,w
   535  0051  0086               	movwf	6	;volatile
   536                           
   537                           ;main.c: 126: if(i==0){
   538  0052  08BD               	movf	main@i,f
   539  0053  1D03               	skipz
   540  0054  2886               	goto	l1495
   541                           
   542                           ;main.c: 127: SR74HC595((mp_1>>3)|((mp_1>>1)&2)|((mp_1<<1)&4)|((mp_1 << 3)&8), randszam);
   543  0055  083E               	movf	main@randszam,w
   544  0056  00F2               	movwf	?_SR74HC595
   545  0057  01F3               	clrf	?_SR74HC595+1
   546  0058  0843               	movf	_mp_1,w
   547  0059  00B4               	movwf	??_main
   548  005A  1003               	clrc
   549  005B  0DB4               	rlf	??_main,f
   550  005C  1003               	clrc
   551  005D  0DB4               	rlf	??_main,f
   552  005E  1003               	clrc
   553  005F  0DB4               	rlf	??_main,f
   554  0060  3008               	movlw	8
   555  0061  0534               	andwf	??_main,w
   556  0062  00B5               	movwf	??_main+1
   557  0063  0843               	movf	_mp_1,w
   558  0064  00B6               	movwf	??_main+2
   559  0065  1003               	clrc
   560  0066  0DB6               	rlf	??_main+2,f
   561  0067  3004               	movlw	4
   562  0068  0536               	andwf	??_main+2,w
   563  0069  00B7               	movwf	??_main+3
   564  006A  0843               	movf	_mp_1,w
   565  006B  00B8               	movwf	??_main+4
   566  006C  1003               	clrc
   567  006D  0CB8               	rrf	??_main+4,f
   568  006E  3002               	movlw	2
   569  006F  0538               	andwf	??_main+4,w
   570  0070  00B9               	movwf	??_main+5
   571  0071  0843               	movf	_mp_1,w
   572  0072  00BA               	movwf	??_main+6
   573  0073  1003               	clrc
   574  0074  0CBA               	rrf	??_main+6,f
   575  0075  1003               	clrc
   576  0076  0CBA               	rrf	??_main+6,f
   577  0077  1003               	clrc
   578  0078  0CBA               	rrf	??_main+6,f
   579  0079  083A               	movf	??_main+6,w
   580  007A  0439               	iorwf	??_main+5,w
   581  007B  0437               	iorwf	??_main+3,w
   582  007C  0435               	iorwf	??_main+1,w
   583  007D  21F3               	fcall	_SR74HC595
   584                           
   585                           ;main.c: 128: _delay((unsigned long)((1)*(4000000/4000.0)));
   586  007E  30F9               	movlw	249
   587  007F  00B4               	movwf	??_main
   588  0080                     u1207:	
   589  0080  0064               	clrwdt
   590  0081  0BB4               	decfsz	??_main,f
   591  0082  2880               	goto	u1207
   592  0083  2884               	nop2	;nop
   593  0084  0064               	clrwdt
   594  0085  298C               	goto	L1
   595  0086                     l1495:	
   596                           ;main.c: 130: }else if(i==1){
   597                           
   598                           ;main.c: 129: SR74HC595(0,randszam);
   599                           
   600  0086  0B3D               	decfsz	main@i,w
   601  0087  28B9               	goto	l1503
   602                           
   603                           ;main.c: 131: SR74HC595((mp_10>>3)|((mp_10>>1)&2)|((mp_10<<1)&4)|((mp_10<<3)&8),randszam
      +                          );
   604  0088  083E               	movf	main@randszam,w
   605  0089  00F2               	movwf	?_SR74HC595
   606  008A  01F3               	clrf	?_SR74HC595+1
   607  008B  0844               	movf	_mp_10,w
   608  008C  00B4               	movwf	??_main
   609  008D  1003               	clrc
   610  008E  0DB4               	rlf	??_main,f
   611  008F  1003               	clrc
   612  0090  0DB4               	rlf	??_main,f
   613  0091  1003               	clrc
   614  0092  0DB4               	rlf	??_main,f
   615  0093  3008               	movlw	8
   616  0094  0534               	andwf	??_main,w
   617  0095  00B5               	movwf	??_main+1
   618  0096  0844               	movf	_mp_10,w
   619  0097  00B6               	movwf	??_main+2
   620  0098  1003               	clrc
   621  0099  0DB6               	rlf	??_main+2,f
   622  009A  3004               	movlw	4
   623  009B  0536               	andwf	??_main+2,w
   624  009C  00B7               	movwf	??_main+3
   625  009D  0844               	movf	_mp_10,w
   626  009E  00B8               	movwf	??_main+4
   627  009F  1003               	clrc
   628  00A0  0CB8               	rrf	??_main+4,f
   629  00A1  3002               	movlw	2
   630  00A2  0538               	andwf	??_main+4,w
   631  00A3  00B9               	movwf	??_main+5
   632  00A4  0844               	movf	_mp_10,w
   633  00A5  00BA               	movwf	??_main+6
   634  00A6  1003               	clrc
   635  00A7  0CBA               	rrf	??_main+6,f
   636  00A8  1003               	clrc
   637  00A9  0CBA               	rrf	??_main+6,f
   638  00AA  1003               	clrc
   639  00AB  0CBA               	rrf	??_main+6,f
   640  00AC  083A               	movf	??_main+6,w
   641  00AD  0439               	iorwf	??_main+5,w
   642  00AE  0437               	iorwf	??_main+3,w
   643  00AF  0435               	iorwf	??_main+1,w
   644  00B0  21F3               	fcall	_SR74HC595
   645                           
   646                           ;main.c: 132: _delay((unsigned long)((1)*(4000000/4000.0)));
   647  00B1  30F9               	movlw	249
   648  00B2  00B4               	movwf	??_main
   649  00B3                     u1217:	
   650  00B3  0064               	clrwdt
   651  00B4  0BB4               	decfsz	??_main,f
   652  00B5  28B3               	goto	u1217
   653  00B6  28B7               	nop2	;nop
   654  00B7  0064               	clrwdt
   655  00B8  298C               	goto	L1
   656  00B9                     l1503:	
   657                           ;main.c: 134: }else if(i==2){
   658                           
   659                           ;main.c: 133: SR74HC595(0,randszam);
   660                           
   661  00B9  083D               	movf	main@i,w
   662  00BA  3A02               	xorlw	2
   663  00BB  1D03               	skipz
   664  00BC  28EE               	goto	l1511
   665                           
   666                           ;main.c: 135: SR74HC595((perc_1>>3)|((perc_1>>1)&2)|((perc_1<<1)&4)|((perc_1<<3)&8),rand
      +                          szam);
   667  00BD  083E               	movf	main@randszam,w
   668  00BE  00F2               	movwf	?_SR74HC595
   669  00BF  01F3               	clrf	?_SR74HC595+1
   670  00C0  0847               	movf	_perc_1,w
   671  00C1  00B4               	movwf	??_main
   672  00C2  1003               	clrc
   673  00C3  0DB4               	rlf	??_main,f
   674  00C4  1003               	clrc
   675  00C5  0DB4               	rlf	??_main,f
   676  00C6  1003               	clrc
   677  00C7  0DB4               	rlf	??_main,f
   678  00C8  3008               	movlw	8
   679  00C9  0534               	andwf	??_main,w
   680  00CA  00B5               	movwf	??_main+1
   681  00CB  0847               	movf	_perc_1,w
   682  00CC  00B6               	movwf	??_main+2
   683  00CD  1003               	clrc
   684  00CE  0DB6               	rlf	??_main+2,f
   685  00CF  3004               	movlw	4
   686  00D0  0536               	andwf	??_main+2,w
   687  00D1  00B7               	movwf	??_main+3
   688  00D2  0847               	movf	_perc_1,w
   689  00D3  00B8               	movwf	??_main+4
   690  00D4  1003               	clrc
   691  00D5  0CB8               	rrf	??_main+4,f
   692  00D6  3002               	movlw	2
   693  00D7  0538               	andwf	??_main+4,w
   694  00D8  00B9               	movwf	??_main+5
   695  00D9  0847               	movf	_perc_1,w
   696  00DA  00BA               	movwf	??_main+6
   697  00DB  1003               	clrc
   698  00DC  0CBA               	rrf	??_main+6,f
   699  00DD  1003               	clrc
   700  00DE  0CBA               	rrf	??_main+6,f
   701  00DF  1003               	clrc
   702  00E0  0CBA               	rrf	??_main+6,f
   703  00E1  083A               	movf	??_main+6,w
   704  00E2  0439               	iorwf	??_main+5,w
   705  00E3  0437               	iorwf	??_main+3,w
   706  00E4  0435               	iorwf	??_main+1,w
   707  00E5  21F3               	fcall	_SR74HC595
   708                           
   709                           ;main.c: 136: _delay((unsigned long)((1)*(4000000/4000.0)));
   710  00E6  30F9               	movlw	249
   711  00E7  00B4               	movwf	??_main
   712  00E8                     u1227:	
   713  00E8  0064               	clrwdt
   714  00E9  0BB4               	decfsz	??_main,f
   715  00EA  28E8               	goto	u1227
   716  00EB  28EC               	nop2	;nop
   717  00EC  0064               	clrwdt
   718  00ED  298C               	goto	L1
   719  00EE                     l1511:	
   720                           ;main.c: 138: }else if(i==3){
   721                           
   722                           ;main.c: 137: SR74HC595(0,randszam);
   723                           
   724  00EE  083D               	movf	main@i,w
   725  00EF  3A03               	xorlw	3
   726  00F0  1D03               	skipz
   727  00F1  2923               	goto	l1519
   728                           
   729                           ;main.c: 139: SR74HC595((perc_10>>3)|((perc_10>>1)&2)|((perc_10<<1)&4)|((perc_10<<3)&8),
      +                          randszam);
   730  00F2  083E               	movf	main@randszam,w
   731  00F3  00F2               	movwf	?_SR74HC595
   732  00F4  01F3               	clrf	?_SR74HC595+1
   733  00F5  0848               	movf	_perc_10,w
   734  00F6  00B4               	movwf	??_main
   735  00F7  1003               	clrc
   736  00F8  0DB4               	rlf	??_main,f
   737  00F9  1003               	clrc
   738  00FA  0DB4               	rlf	??_main,f
   739  00FB  1003               	clrc
   740  00FC  0DB4               	rlf	??_main,f
   741  00FD  3008               	movlw	8
   742  00FE  0534               	andwf	??_main,w
   743  00FF  00B5               	movwf	??_main+1
   744  0100  0848               	movf	_perc_10,w
   745  0101  00B6               	movwf	??_main+2
   746  0102  1003               	clrc
   747  0103  0DB6               	rlf	??_main+2,f
   748  0104  3004               	movlw	4
   749  0105  0536               	andwf	??_main+2,w
   750  0106  00B7               	movwf	??_main+3
   751  0107  0848               	movf	_perc_10,w
   752  0108  00B8               	movwf	??_main+4
   753  0109  1003               	clrc
   754  010A  0CB8               	rrf	??_main+4,f
   755  010B  3002               	movlw	2
   756  010C  0538               	andwf	??_main+4,w
   757  010D  00B9               	movwf	??_main+5
   758  010E  0848               	movf	_perc_10,w
   759  010F  00BA               	movwf	??_main+6
   760  0110  1003               	clrc
   761  0111  0CBA               	rrf	??_main+6,f
   762  0112  1003               	clrc
   763  0113  0CBA               	rrf	??_main+6,f
   764  0114  1003               	clrc
   765  0115  0CBA               	rrf	??_main+6,f
   766  0116  083A               	movf	??_main+6,w
   767  0117  0439               	iorwf	??_main+5,w
   768  0118  0437               	iorwf	??_main+3,w
   769  0119  0435               	iorwf	??_main+1,w
   770  011A  21F3               	fcall	_SR74HC595
   771                           
   772                           ;main.c: 140: _delay((unsigned long)((1)*(4000000/4000.0)));
   773  011B  30F9               	movlw	249
   774  011C  00B4               	movwf	??_main
   775  011D                     u1237:	
   776  011D  0064               	clrwdt
   777  011E  0BB4               	decfsz	??_main,f
   778  011F  291D               	goto	u1237
   779  0120  2921               	nop2	;nop
   780  0121  0064               	clrwdt
   781  0122  298C               	goto	L1
   782  0123                     l1519:	
   783                           ;main.c: 142: }else if(i==4){
   784                           
   785                           ;main.c: 141: SR74HC595(0,randszam);
   786                           
   787  0123  083D               	movf	main@i,w
   788  0124  3A04               	xorlw	4
   789  0125  1D03               	skipz
   790  0126  2958               	goto	l1527
   791                           
   792                           ;main.c: 143: SR74HC595((ora_1>>3)|((ora_1>>1)&2)|((ora_1<<1)&4)|((ora_1<<3)&8),randszam
      +                          );
   793  0127  083E               	movf	main@randszam,w
   794  0128  00F2               	movwf	?_SR74HC595
   795  0129  01F3               	clrf	?_SR74HC595+1
   796  012A  0845               	movf	_ora_1,w
   797  012B  00B4               	movwf	??_main
   798  012C  1003               	clrc
   799  012D  0DB4               	rlf	??_main,f
   800  012E  1003               	clrc
   801  012F  0DB4               	rlf	??_main,f
   802  0130  1003               	clrc
   803  0131  0DB4               	rlf	??_main,f
   804  0132  3008               	movlw	8
   805  0133  0534               	andwf	??_main,w
   806  0134  00B5               	movwf	??_main+1
   807  0135  0845               	movf	_ora_1,w
   808  0136  00B6               	movwf	??_main+2
   809  0137  1003               	clrc
   810  0138  0DB6               	rlf	??_main+2,f
   811  0139  3004               	movlw	4
   812  013A  0536               	andwf	??_main+2,w
   813  013B  00B7               	movwf	??_main+3
   814  013C  0845               	movf	_ora_1,w
   815  013D  00B8               	movwf	??_main+4
   816  013E  1003               	clrc
   817  013F  0CB8               	rrf	??_main+4,f
   818  0140  3002               	movlw	2
   819  0141  0538               	andwf	??_main+4,w
   820  0142  00B9               	movwf	??_main+5
   821  0143  0845               	movf	_ora_1,w
   822  0144  00BA               	movwf	??_main+6
   823  0145  1003               	clrc
   824  0146  0CBA               	rrf	??_main+6,f
   825  0147  1003               	clrc
   826  0148  0CBA               	rrf	??_main+6,f
   827  0149  1003               	clrc
   828  014A  0CBA               	rrf	??_main+6,f
   829  014B  083A               	movf	??_main+6,w
   830  014C  0439               	iorwf	??_main+5,w
   831  014D  0437               	iorwf	??_main+3,w
   832  014E  0435               	iorwf	??_main+1,w
   833  014F  21F3               	fcall	_SR74HC595
   834                           
   835                           ;main.c: 144: _delay((unsigned long)((1)*(4000000/4000.0)));
   836  0150  30F9               	movlw	249
   837  0151  00B4               	movwf	??_main
   838  0152                     u1247:	
   839  0152  0064               	clrwdt
   840  0153  0BB4               	decfsz	??_main,f
   841  0154  2952               	goto	u1247
   842  0155  2956               	nop2	;nop
   843  0156  0064               	clrwdt
   844  0157  298C               	goto	L1
   845  0158                     l1527:	
   846                           ;main.c: 146: }else if(i==5){
   847                           
   848                           ;main.c: 145: SR74HC595(0,randszam);
   849                           
   850  0158  083D               	movf	main@i,w
   851  0159  3A05               	xorlw	5
   852  015A  1D03               	skipz
   853  015B  2993               	goto	l382
   854                           
   855                           ;main.c: 147: SR74HC595((ora_10>>3)|((ora_10>>1)&2)|((ora_10<<1)&4)|((ora_10<<3)&8),rand
      +                          szam);
   856  015C  083E               	movf	main@randszam,w
   857  015D  00F2               	movwf	?_SR74HC595
   858  015E  01F3               	clrf	?_SR74HC595+1
   859  015F  0846               	movf	_ora_10,w
   860  0160  00B4               	movwf	??_main
   861  0161  1003               	clrc
   862  0162  0DB4               	rlf	??_main,f
   863  0163  1003               	clrc
   864  0164  0DB4               	rlf	??_main,f
   865  0165  1003               	clrc
   866  0166  0DB4               	rlf	??_main,f
   867  0167  3008               	movlw	8
   868  0168  0534               	andwf	??_main,w
   869  0169  00B5               	movwf	??_main+1
   870  016A  0846               	movf	_ora_10,w
   871  016B  00B6               	movwf	??_main+2
   872  016C  1003               	clrc
   873  016D  0DB6               	rlf	??_main+2,f
   874  016E  3004               	movlw	4
   875  016F  0536               	andwf	??_main+2,w
   876  0170  00B7               	movwf	??_main+3
   877  0171  0846               	movf	_ora_10,w
   878  0172  00B8               	movwf	??_main+4
   879  0173  1003               	clrc
   880  0174  0CB8               	rrf	??_main+4,f
   881  0175  3002               	movlw	2
   882  0176  0538               	andwf	??_main+4,w
   883  0177  00B9               	movwf	??_main+5
   884  0178  0846               	movf	_ora_10,w
   885  0179  00BA               	movwf	??_main+6
   886  017A  1003               	clrc
   887  017B  0CBA               	rrf	??_main+6,f
   888  017C  1003               	clrc
   889  017D  0CBA               	rrf	??_main+6,f
   890  017E  1003               	clrc
   891  017F  0CBA               	rrf	??_main+6,f
   892  0180  083A               	movf	??_main+6,w
   893  0181  0439               	iorwf	??_main+5,w
   894  0182  0437               	iorwf	??_main+3,w
   895  0183  0435               	iorwf	??_main+1,w
   896  0184  21F3               	fcall	_SR74HC595
   897                           
   898                           ;main.c: 148: _delay((unsigned long)((1)*(4000000/4000.0)));
   899  0185  30F9               	movlw	249
   900  0186  00B4               	movwf	??_main
   901  0187                     u1257:	
   902  0187  0064               	clrwdt
   903  0188  0BB4               	decfsz	??_main,f
   904  0189  2987               	goto	u1257
   905  018A  298B               	nop2	;nop
   906  018B  0064               	clrwdt
   907  018C                     L1:	
   908                           
   909                           ;main.c: 149: SR74HC595(0,randszam);
   910  018C  1283               	bcf	3,5	;RP0=0, select bank0
   911  018D  1303               	bcf	3,6	;RP1=0, select bank0
   912  018E  083E               	movf	main@randszam,w
   913  018F  00F2               	movwf	?_SR74HC595
   914  0190  01F3               	clrf	?_SR74HC595+1
   915  0191  3000               	movlw	0
   916  0192  21F3               	fcall	_SR74HC595
   917  0193                     l382:	
   918                           
   919                           ;main.c: 150: }
   920                           ;main.c: 154: _delay((unsigned long)((1)*(4000000/4000.0)));
   921  0193  30F9               	movlw	249
   922  0194  00B4               	movwf	??_main
   923  0195                     u1267:	
   924  0195  0064               	clrwdt
   925  0196  0BB4               	decfsz	??_main,f
   926  0197  2995               	goto	u1267
   927  0198  2999               	nop2	;nop
   928  0199  0064               	clrwdt
   929  019A  1283               	bcf	3,5	;RP0=0, select bank0
   930  019B  1303               	bcf	3,6	;RP1=0, select bank0
   931  019C  0ABD               	incf	main@i,f
   932  019D  3006               	movlw	6
   933  019E  023D               	subwf	main@i,w
   934  019F  1C03               	skipc
   935  01A0  2843               	goto	l1477
   936                           
   937                           ;main.c: 156: }
   938                           ;main.c: 158: _delay((unsigned long)((1)*(4000000/4000.0)));
   939  01A1  30F9               	movlw	249
   940  01A2  00B4               	movwf	??_main
   941  01A3                     u1277:	
   942  01A3  0064               	clrwdt
   943  01A4  0BB4               	decfsz	??_main,f
   944  01A5  29A3               	goto	u1277
   945  01A6  29A7               	nop2	;nop
   946  01A7  0064               	clrwdt
   947  01A8  280C               	goto	l1433
   948  01A9                     __end_of_main:	
   949                           
   950                           	psect	text232
   951  02DE                     __ptext232:	
   952 ;; =============== function _main ends ============
   953                           
   954                           
   955 ;; *************** function _random_szam *****************
   956 ;; Defined at:
   957 ;;		line 220 in file "C:\Users\DPTP\Dropbox\PIC_Programozas\P16F628\SMD_RGB_binaris_ora\main.c"
   958 ;; Parameters:    Size  Location     Type
   959 ;;  mettol          2   16[BANK0 ] unsigned int 
   960 ;;  meddig          2   18[BANK0 ] unsigned int 
   961 ;; Auto vars:     Size  Location     Type
   962 ;;		None
   963 ;; Return value:  Size  Location     Type
   964 ;;                  2   16[BANK0 ] unsigned int 
   965 ;; Registers used:
   966 ;;		wreg, status,2, status,0, pclath, cstack
   967 ;; Tracked objects:
   968 ;;		On entry : 60/0
   969 ;;		On exit  : 60/0
   970 ;;		Unchanged: FFF9F/0
   971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   972 ;;      Params:         0       4       0       0
   973 ;;      Locals:         0       0       0       0
   974 ;;      Temps:          0       0       0       0
   975 ;;      Totals:         0       4       0       0
   976 ;;Total ram usage:        4 bytes
   977 ;; Hardware stack levels used:    1
   978 ;; Hardware stack levels required when called:    3
   979 ;; This function calls:
   980 ;;		_rand
   981 ;;		___awmod
   982 ;; This function is called by:
   983 ;;		_main
   984 ;; This function uses a non-reentrant model
   985 ;;
   986  02DE                     _random_szam:	
   987                           
   988                           ;main.c: 221: return rand() % (meddig-mettol+1) + mettol;
   989                           
   990                           ; Regs used in _random_szam: [wreg+status,2+status,0+pclath+cstack]
   991  02DE  0833               	movf	random_szam@meddig+1,w
   992  02DF  00A5               	movwf	?___awmod+1
   993  02E0  0832               	movf	random_szam@meddig,w
   994  02E1  00A4               	movwf	?___awmod
   995  02E2  0830               	movf	random_szam@mettol,w
   996  02E3  02A4               	subwf	?___awmod,f
   997  02E4  0831               	movf	random_szam@mettol+1,w
   998  02E5  1C03               	skipc
   999  02E6  03A5               	decf	?___awmod+1,f
  1000  02E7  02A5               	subwf	?___awmod+1,f
  1001  02E8  0AA4               	incf	?___awmod,f
  1002  02E9  1903               	skipnz
  1003  02EA  0AA5               	incf	?___awmod+1,f
  1004  02EB  2271               	fcall	_rand
  1005  02EC  082B               	movf	?_rand+1,w
  1006  02ED  00A7               	movwf	?___awmod+3
  1007  02EE  082A               	movf	?_rand,w
  1008  02EF  00A6               	movwf	?___awmod+2
  1009  02F0  2234               	fcall	___awmod
  1010  02F1  0830               	movf	random_szam@mettol,w
  1011  02F2  0724               	addwf	?___awmod,w
  1012  02F3  00B0               	movwf	?_random_szam
  1013  02F4  0831               	movf	random_szam@mettol+1,w
  1014  02F5  1803               	skipnc
  1015  02F6  0A31               	incf	random_szam@mettol+1,w
  1016  02F7  0725               	addwf	?___awmod+1,w
  1017  02F8  00B1               	movwf	?_random_szam+1
  1018  02F9  0008               	return
  1019  02FA                     __end_of_random_szam:	
  1020                           
  1021                           	psect	text233
  1022  0271                     __ptext233:	
  1023 ;; =============== function _random_szam ends ============
  1024                           
  1025                           
  1026 ;; *************** function _rand *****************
  1027 ;; Defined at:
  1028 ;;		line 14 in file "../../common/rand.c"
  1029 ;; Parameters:    Size  Location     Type
  1030 ;;		None
  1031 ;; Auto vars:     Size  Location     Type
  1032 ;;		None
  1033 ;; Return value:  Size  Location     Type
  1034 ;;                  2   10[BANK0 ] int 
  1035 ;; Registers used:
  1036 ;;		wreg, status,2, status,0, pclath, cstack
  1037 ;; Tracked objects:
  1038 ;;		On entry : 60/0
  1039 ;;		On exit  : 60/0
  1040 ;;		Unchanged: FFF9F/0
  1041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1042 ;;      Params:         0       2       0       0
  1043 ;;      Locals:         0       0       0       0
  1044 ;;      Temps:          0       4       0       0
  1045 ;;      Totals:         0       6       0       0
  1046 ;;Total ram usage:        6 bytes
  1047 ;; Hardware stack levels used:    1
  1048 ;; Hardware stack levels required when called:    2
  1049 ;; This function calls:
  1050 ;;		_srand
  1051 ;;		___lmul
  1052 ;; This function is called by:
  1053 ;;		_random_szam
  1054 ;; This function uses a non-reentrant model
  1055 ;;
  1056  0271                     _rand:	
  1057                           
  1058                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
  1059  0271  08C9               	movf	_randf,f
  1060  0272  1D03               	skipz
  1061  0273  2A78               	goto	l427
  1062  0274  01F2               	clrf	?_srand
  1063  0275  0AF2               	incf	?_srand,f
  1064  0276  01F3               	clrf	?_srand+1
  1065  0277  2320               	fcall	_srand
  1066  0278                     l427:	
  1067  0278  3039               	movlw	57
  1068  0279  00AC               	movwf	??_rand
  1069  027A  3030               	movlw	48
  1070  027B  00AD               	movwf	??_rand+1
  1071  027C  01AE               	clrf	??_rand+2
  1072  027D  01AF               	clrf	??_rand+3
  1073  027E  0842               	movf	_randx+3,w
  1074  027F  00F5               	movwf	?___lmul+3
  1075  0280  0841               	movf	_randx+2,w
  1076  0281  00F4               	movwf	?___lmul+2
  1077  0282  0840               	movf	_randx+1,w
  1078  0283  00F3               	movwf	?___lmul+1
  1079  0284  083F               	movf	_randx,w
  1080  0285  00F2               	movwf	?___lmul
  1081  0286  3041               	movlw	65
  1082  0287  00F9               	movwf	?___lmul+7
  1083  0288  30C6               	movlw	198
  1084  0289  00F8               	movwf	?___lmul+6
  1085  028A  304E               	movlw	78
  1086  028B  00F7               	movwf	?___lmul+5
  1087  028C  306D               	movlw	109
  1088  028D  00F6               	movwf	?___lmul+4
  1089  028E  22AB               	fcall	___lmul
  1090  028F  0872               	movf	?___lmul,w
  1091  0290  07AC               	addwf	??_rand,f
  1092  0291  0873               	movf	?___lmul+1,w
  1093  0292  1803               	skipnc
  1094  0293  0F73               	incfsz	?___lmul+1,w
  1095  0294  07AD               	addwf	??_rand+1,f
  1096  0295  0874               	movf	?___lmul+2,w
  1097  0296  1803               	skipnc
  1098  0297  0F74               	incfsz	?___lmul+2,w
  1099  0298  07AE               	addwf	??_rand+2,f
  1100  0299  0875               	movf	?___lmul+3,w
  1101  029A  1803               	skipnc
  1102  029B  0A75               	incf	?___lmul+3,w
  1103  029C  07AF               	addwf	??_rand+3,f
  1104  029D  082F               	movf	??_rand+3,w
  1105  029E  00C2               	movwf	_randx+3
  1106  029F  082E               	movf	??_rand+2,w
  1107  02A0  00C1               	movwf	_randx+2
  1108  02A1  082D               	movf	??_rand+1,w
  1109  02A2  00C0               	movwf	_randx+1
  1110  02A3  082C               	movf	??_rand,w
  1111  02A4  00BF               	movwf	_randx
  1112  02A5  0842               	movf	_randx+3,w
  1113  02A6  00AB               	movwf	?_rand+1
  1114  02A7  0841               	movf	_randx+2,w
  1115  02A8  00AA               	movwf	?_rand
  1116  02A9  13AB               	bcf	?_rand+1,7
  1117  02AA  0008               	return
  1118  02AB                     __end_of_rand:	
  1119                           
  1120                           	psect	text234
  1121  0234                     __ptext234:	
  1122 ;; =============== function _rand ends ============
  1123                           
  1124                           
  1125 ;; *************** function ___awmod *****************
  1126 ;; Defined at:
  1127 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.71a\sources\awmod.c"
  1128 ;; Parameters:    Size  Location     Type
  1129 ;;  divisor         2    4[BANK0 ] int 
  1130 ;;  dividend        2    6[BANK0 ] int 
  1131 ;; Auto vars:     Size  Location     Type
  1132 ;;  sign            1    9[BANK0 ] unsigned char 
  1133 ;;  counter         1    8[BANK0 ] unsigned char 
  1134 ;; Return value:  Size  Location     Type
  1135 ;;                  2    4[BANK0 ] int 
  1136 ;; Registers used:
  1137 ;;		wreg, status,2, status,0
  1138 ;; Tracked objects:
  1139 ;;		On entry : 60/0
  1140 ;;		On exit  : 60/0
  1141 ;;		Unchanged: FFF9F/0
  1142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1143 ;;      Params:         0       4       0       0
  1144 ;;      Locals:         0       2       0       0
  1145 ;;      Temps:          0       0       0       0
  1146 ;;      Totals:         0       6       0       0
  1147 ;;Total ram usage:        6 bytes
  1148 ;; Hardware stack levels used:    1
  1149 ;; Hardware stack levels required when called:    1
  1150 ;; This function calls:
  1151 ;;		Nothing
  1152 ;; This function is called by:
  1153 ;;		_random_szam
  1154 ;; This function uses a non-reentrant model
  1155 ;;
  1156  0234                     ___awmod:	
  1157                           
  1158                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1159  0234  01A9               	clrf	___awmod@sign
  1160  0235  1FA7               	btfss	___awmod@dividend+1,7
  1161  0236  2A3E               	goto	l1399
  1162  0237  09A6               	comf	___awmod@dividend,f
  1163  0238  09A7               	comf	___awmod@dividend+1,f
  1164  0239  0AA6               	incf	___awmod@dividend,f
  1165  023A  1903               	skipnz
  1166  023B  0AA7               	incf	___awmod@dividend+1,f
  1167  023C  01A9               	clrf	___awmod@sign
  1168  023D  0AA9               	incf	___awmod@sign,f
  1169  023E                     l1399:	
  1170  023E  1FA5               	btfss	___awmod@divisor+1,7
  1171  023F  2A45               	goto	l1403
  1172  0240  09A4               	comf	___awmod@divisor,f
  1173  0241  09A5               	comf	___awmod@divisor+1,f
  1174  0242  0AA4               	incf	___awmod@divisor,f
  1175  0243  1903               	skipnz
  1176  0244  0AA5               	incf	___awmod@divisor+1,f
  1177  0245                     l1403:	
  1178  0245  0825               	movf	___awmod@divisor+1,w
  1179  0246  0424               	iorwf	___awmod@divisor,w
  1180  0247  1903               	skipnz
  1181  0248  2A64               	goto	l1419
  1182  0249  01A8               	clrf	___awmod@counter
  1183  024A                     L2:	
  1184  024A  0AA8               	incf	___awmod@counter,f
  1185  024B  1BA5               	btfsc	___awmod@divisor+1,7
  1186  024C  2A51               	goto	l1411
  1187  024D  1003               	clrc
  1188  024E  0DA4               	rlf	___awmod@divisor,f
  1189  024F  0DA5               	rlf	___awmod@divisor+1,f
  1190  0250  2A4A               	goto	L2
  1191  0251                     l1411:	
  1192  0251  0825               	movf	___awmod@divisor+1,w
  1193  0252  0227               	subwf	___awmod@dividend+1,w
  1194  0253  1D03               	skipz
  1195  0254  2A57               	goto	u995
  1196  0255  0824               	movf	___awmod@divisor,w
  1197  0256  0226               	subwf	___awmod@dividend,w
  1198  0257                     u995:	
  1199  0257  1C03               	skipc
  1200  0258  2A60               	goto	L3
  1201  0259  0824               	movf	___awmod@divisor,w
  1202  025A  02A6               	subwf	___awmod@dividend,f
  1203  025B  0825               	movf	___awmod@divisor+1,w
  1204  025C  1C03               	skipc
  1205  025D  03A7               	decf	___awmod@dividend+1,f
  1206  025E  02A7               	subwf	___awmod@dividend+1,f
  1207  025F  1003               	clrc
  1208  0260                     L3:	
  1209  0260  0CA5               	rrf	___awmod@divisor+1,f
  1210  0261  0CA4               	rrf	___awmod@divisor,f
  1211  0262  0BA8               	decfsz	___awmod@counter,f
  1212  0263  2A51               	goto	l1411
  1213  0264                     l1419:	
  1214  0264  0829               	movf	___awmod@sign,w
  1215  0265  1903               	btfsc	3,2
  1216  0266  2A6C               	goto	l1423
  1217  0267  09A6               	comf	___awmod@dividend,f
  1218  0268  09A7               	comf	___awmod@dividend+1,f
  1219  0269  0AA6               	incf	___awmod@dividend,f
  1220  026A  1903               	skipnz
  1221  026B  0AA7               	incf	___awmod@dividend+1,f
  1222  026C                     l1423:	
  1223  026C  0827               	movf	___awmod@dividend+1,w
  1224  026D  00A5               	movwf	?___awmod+1
  1225  026E  0826               	movf	___awmod@dividend,w
  1226  026F  00A4               	movwf	?___awmod
  1227  0270  0008               	return
  1228  0271                     __end_of___awmod:	
  1229                           
  1230                           	psect	text235
  1231  02AB                     __ptext235:	
  1232 ;; =============== function ___awmod ends ============
  1233                           
  1234                           
  1235 ;; *************** function ___lmul *****************
  1236 ;; Defined at:
  1237 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.71a\sources\lmul.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;  multiplier      4    2[COMMON] unsigned long 
  1240 ;;  multiplicand    4    6[COMMON] unsigned long 
  1241 ;; Auto vars:     Size  Location     Type
  1242 ;;  product         4    0[BANK0 ] unsigned long 
  1243 ;; Return value:  Size  Location     Type
  1244 ;;                  4    2[COMMON] unsigned long 
  1245 ;; Registers used:
  1246 ;;		wreg, status,2, status,0
  1247 ;; Tracked objects:
  1248 ;;		On entry : 60/0
  1249 ;;		On exit  : 60/0
  1250 ;;		Unchanged: FFF9F/0
  1251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1252 ;;      Params:         8       0       0       0
  1253 ;;      Locals:         0       4       0       0
  1254 ;;      Temps:          0       0       0       0
  1255 ;;      Totals:         8       4       0       0
  1256 ;;Total ram usage:       12 bytes
  1257 ;; Hardware stack levels used:    1
  1258 ;; Hardware stack levels required when called:    1
  1259 ;; This function calls:
  1260 ;;		Nothing
  1261 ;; This function is called by:
  1262 ;;		_rand
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265  02AB                     ___lmul:	
  1266                           
  1267                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1268  02AB  01A0               	clrf	___lmul@product
  1269  02AC  01A1               	clrf	___lmul@product+1
  1270  02AD  01A2               	clrf	___lmul@product+2
  1271  02AE  01A3               	clrf	___lmul@product+3
  1272  02AF                     l512:	
  1273  02AF  1C72               	btfss	___lmul@multiplier,0
  1274  02B0  2AC5               	goto	l1223
  1275  02B1  0876               	movf	___lmul@multiplicand,w
  1276  02B2  07A0               	addwf	___lmul@product,f
  1277  02B3  0877               	movf	___lmul@multiplicand+1,w
  1278  02B4  1103               	clrz
  1279  02B5  1803               	skipnc
  1280  02B6  3E01               	addlw	1
  1281  02B7  1D03               	btfss	3,2
  1282  02B8  07A1               	addwf	___lmul@product+1,f
  1283  02B9  0878               	movf	___lmul@multiplicand+2,w
  1284  02BA  1103               	clrz
  1285  02BB  1803               	skipnc
  1286  02BC  3E01               	addlw	1
  1287  02BD  1D03               	btfss	3,2
  1288  02BE  07A2               	addwf	___lmul@product+2,f
  1289  02BF  0879               	movf	___lmul@multiplicand+3,w
  1290  02C0  1103               	clrz
  1291  02C1  1803               	skipnc
  1292  02C2  3E01               	addlw	1
  1293  02C3  1D03               	btfss	3,2
  1294  02C4  07A3               	addwf	___lmul@product+3,f
  1295  02C5                     l1223:	
  1296  02C5  1003               	clrc
  1297  02C6  0DF6               	rlf	___lmul@multiplicand,f
  1298  02C7  0DF7               	rlf	___lmul@multiplicand+1,f
  1299  02C8  0DF8               	rlf	___lmul@multiplicand+2,f
  1300  02C9  0DF9               	rlf	___lmul@multiplicand+3,f
  1301  02CA  1003               	clrc
  1302  02CB  0CF5               	rrf	___lmul@multiplier+3,f
  1303  02CC  0CF4               	rrf	___lmul@multiplier+2,f
  1304  02CD  0CF3               	rrf	___lmul@multiplier+1,f
  1305  02CE  0CF2               	rrf	___lmul@multiplier,f
  1306  02CF  0875               	movf	___lmul@multiplier+3,w
  1307  02D0  0474               	iorwf	___lmul@multiplier+2,w
  1308  02D1  0473               	iorwf	___lmul@multiplier+1,w
  1309  02D2  0472               	iorwf	___lmul@multiplier,w
  1310  02D3  1D03               	skipz
  1311  02D4  2AAF               	goto	l512
  1312  02D5  0823               	movf	___lmul@product+3,w
  1313  02D6  00F5               	movwf	?___lmul+3
  1314  02D7  0822               	movf	___lmul@product+2,w
  1315  02D8  00F4               	movwf	?___lmul+2
  1316  02D9  0821               	movf	___lmul@product+1,w
  1317  02DA  00F3               	movwf	?___lmul+1
  1318  02DB  0820               	movf	___lmul@product,w
  1319  02DC  00F2               	movwf	?___lmul
  1320  02DD  0008               	return
  1321  02DE                     __end_of___lmul:	
  1322                           
  1323                           	psect	text236
  1324  0320                     __ptext236:	
  1325 ;; =============== function ___lmul ends ============
  1326                           
  1327                           
  1328 ;; *************** function _srand *****************
  1329 ;; Defined at:
  1330 ;;		line 8 in file "../../common/rand.c"
  1331 ;; Parameters:    Size  Location     Type
  1332 ;;  x               2    2[COMMON] unsigned int 
  1333 ;; Auto vars:     Size  Location     Type
  1334 ;;		None
  1335 ;; Return value:  Size  Location     Type
  1336 ;;		None               void
  1337 ;; Registers used:
  1338 ;;		wreg
  1339 ;; Tracked objects:
  1340 ;;		On entry : 60/0
  1341 ;;		On exit  : 60/0
  1342 ;;		Unchanged: FFF9F/0
  1343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1344 ;;      Params:         2       0       0       0
  1345 ;;      Locals:         0       0       0       0
  1346 ;;      Temps:          0       0       0       0
  1347 ;;      Totals:         2       0       0       0
  1348 ;;Total ram usage:        2 bytes
  1349 ;; Hardware stack levels used:    1
  1350 ;; Hardware stack levels required when called:    1
  1351 ;; This function calls:
  1352 ;;		Nothing
  1353 ;; This function is called by:
  1354 ;;		_rand
  1355 ;; This function uses a non-reentrant model
  1356 ;;
  1357  0320                     _srand:	
  1358                           
  1359                           ; Regs used in _srand: [wreg]
  1360  0320  0872               	movf	srand@x,w
  1361  0321  00BF               	movwf	_randx
  1362  0322  0873               	movf	srand@x+1,w
  1363  0323  00C0               	movwf	_randx+1
  1364  0324  01C1               	clrf	_randx+2
  1365  0325  01C2               	clrf	_randx+3
  1366  0326  01C9               	clrf	_randf
  1367  0327  0AC9               	incf	_randf,f
  1368  0328  0008               	return
  1369  0329                     __end_of_srand:	
  1370                           
  1371                           	psect	text237
  1372  01F3                     __ptext237:	
  1373 ;; =============== function _srand ends ============
  1374                           
  1375                           
  1376 ;; *************** function _SR74HC595 *****************
  1377 ;; Defined at:
  1378 ;;		line 186 in file "C:\Users\DPTP\Dropbox\PIC_Programozas\P16F628\SMD_RGB_binaris_ora\main.c"
  1379 ;; Parameters:    Size  Location     Type
  1380 ;;  ADAT            1    wreg     unsigned char 
  1381 ;;  szin            2    2[COMMON] unsigned int 
  1382 ;; Auto vars:     Size  Location     Type
  1383 ;;  ADAT            1    6[COMMON] unsigned char 
  1384 ;;  i               1    7[COMMON] unsigned char 
  1385 ;;  shift           1    5[COMMON] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;		None               void
  1388 ;; Registers used:
  1389 ;;		wreg, status,2, status,0
  1390 ;; Tracked objects:
  1391 ;;		On entry : 60/0
  1392 ;;		On exit  : 60/0
  1393 ;;		Unchanged: FFF9F/0
  1394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1395 ;;      Params:         2       0       0       0
  1396 ;;      Locals:         3       0       0       0
  1397 ;;      Temps:          1       0       0       0
  1398 ;;      Totals:         6       0       0       0
  1399 ;;Total ram usage:        6 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:    1
  1402 ;; This function calls:
  1403 ;;		Nothing
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408  01F3                     _SR74HC595:	
  1409                           
  1410                           ; Regs used in _SR74HC595: [wreg+status,2+status,0]
  1411                           ;SR74HC595@ADAT stored from wreg
  1412  01F3  00F6               	movwf	SR74HC595@ADAT
  1413                           
  1414                           ;main.c: 187: unsigned char i, shift;
  1415                           ;main.c: 188: if(szin==1){
  1416  01F4  0372               	decf	SR74HC595@szin,w
  1417  01F5  0473               	iorwf	SR74HC595@szin+1,w
  1418  01F6  1D03               	skipz
  1419  01F7  29FC               	goto	l1181
  1420                           
  1421                           ;main.c: 189: RA1=0;
  1422  01F8  1085               	bcf	5,1
  1423  01F9                     l1179:	
  1424                           
  1425                           ;main.c: 190: shift = ADAT<<4;
  1426  01F9  0E76               	swapf	SR74HC595@ADAT,w
  1427  01FA  39F0               	andlw	240
  1428  01FB  2A0A               	goto	L4
  1429  01FC                     l1181:	
  1430                           ;main.c: 191: }else if(szin==2){
  1431                           
  1432  01FC  0872               	movf	SR74HC595@szin,w
  1433  01FD  3A02               	xorlw	2
  1434  01FE  0473               	iorwf	SR74HC595@szin+1,w
  1435  01FF  1D03               	skipz
  1436  0200  2A03               	goto	l1187
  1437                           
  1438                           ;main.c: 192: RB7=0;
  1439  0201  1386               	bcf	6,7
  1440  0202  29F9               	goto	l1179
  1441  0203                     l1187:	
  1442  0203  0872               	movf	SR74HC595@szin,w
  1443  0204  3A03               	xorlw	3
  1444  0205  0473               	iorwf	SR74HC595@szin+1,w
  1445  0206  1D03               	skipz
  1446  0207  2A0B               	goto	l1193
  1447                           
  1448                           ;main.c: 195: RA1=0;
  1449  0208  1085               	bcf	5,1
  1450                           
  1451                           ;main.c: 196: shift = ADAT;
  1452  0209  0876               	movf	SR74HC595@ADAT,w
  1453  020A                     L4:	
  1454  020A  00F5               	movwf	SR74HC595@shift
  1455  020B                     l1193:	
  1456                           
  1457                           ;main.c: 197: }
  1458                           ;main.c: 199: for(i=0; i<8; i++){
  1459  020B  01F7               	clrf	SR74HC595@i
  1460  020C                     l1199:	
  1461                           
  1462                           ;main.c: 200: if((shift>>i)&1==1){
  1463  020C  0875               	movf	SR74HC595@shift,w
  1464  020D  00F4               	movwf	??_SR74HC595
  1465  020E  0A77               	incf	SR74HC595@i,w
  1466  020F  2A12               	goto	u594
  1467  0210                     u595:	
  1468  0210  1003               	clrc
  1469  0211  0CF4               	rrf	??_SR74HC595,f
  1470  0212                     u594:	
  1471  0212  3EFF               	addlw	-1
  1472  0213  1D03               	skipz
  1473  0214  2A10               	goto	u595
  1474  0215  1C74               	btfss	??_SR74HC595,0
  1475  0216  2A19               	goto	l407
  1476                           
  1477                           ;main.c: 201: RA0=1;
  1478  0217  1405               	bsf	5,0
  1479  0218  2A1A               	goto	L5
  1480  0219                     l407:	
  1481                           ;main.c: 204: }else{
  1482                           
  1483                           ;main.c: 203: RA3=0;
  1484                           
  1485                           ;main.c: 202: RA3=1;
  1486                           
  1487                           
  1488                           ;main.c: 205: RA0=0;
  1489  0219  1005               	bcf	5,0
  1490  021A                     L5:	
  1491                           
  1492                           ;main.c: 206: RA3=1;
  1493  021A  1585               	bsf	5,3
  1494                           
  1495                           ;main.c: 207: RA3=0;
  1496  021B  1185               	bcf	5,3
  1497  021C  0AF7               	incf	SR74HC595@i,f
  1498  021D  3008               	movlw	8
  1499  021E  0277               	subwf	SR74HC595@i,w
  1500  021F  1C03               	skipc
  1501  0220  2A0C               	goto	l1199
  1502                           
  1503                           ;main.c: 208: }
  1504                           ;main.c: 209: }
  1505                           ;main.c: 210: if(szin==1||szin==3){
  1506  0221  0372               	decf	SR74HC595@szin,w
  1507  0222  0473               	iorwf	SR74HC595@szin+1,w
  1508  0223  1903               	skipnz
  1509  0224  2A2A               	goto	l411
  1510  0225  0872               	movf	SR74HC595@szin,w
  1511  0226  3A03               	xorlw	3
  1512  0227  0473               	iorwf	SR74HC595@szin+1,w
  1513  0228  1D03               	skipz
  1514  0229  2A2C               	goto	l1211
  1515  022A                     l411:	
  1516                           
  1517                           ;main.c: 211: RA1=1;
  1518  022A  1485               	bsf	5,1
  1519                           
  1520                           ;main.c: 212: }else if(szin==2){
  1521  022B  2A31               	goto	l412
  1522  022C                     l1211:	
  1523  022C  0872               	movf	SR74HC595@szin,w
  1524  022D  3A02               	xorlw	2
  1525  022E  0473               	iorwf	SR74HC595@szin+1,w
  1526  022F  1903               	btfsc	3,2
  1527                           
  1528                           ;main.c: 213: RB7=1;
  1529  0230  1786               	bsf	6,7
  1530  0231                     l412:	
  1531                           
  1532                           ;main.c: 214: }
  1533                           ;main.c: 215: RA0=0;
  1534  0231  1005               	bcf	5,0
  1535                           
  1536                           ;main.c: 216: RA3=0;
  1537  0232  1185               	bcf	5,3
  1538  0233  0008               	return
  1539  0234                     __end_of_SR74HC595:	
  1540                           
  1541                           	psect	text238
  1542  02FA                     __ptext238:	
  1543 ;; =============== function _SR74HC595 ends ============
  1544                           
  1545                           
  1546 ;; *************** function _init_setup *****************
  1547 ;; Defined at:
  1548 ;;		line 164 in file "C:\Users\DPTP\Dropbox\PIC_Programozas\P16F628\SMD_RGB_binaris_ora\main.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;		None               void
  1555 ;; Registers used:
  1556 ;;		wreg, status,2
  1557 ;; Tracked objects:
  1558 ;;		On entry : 17F/0
  1559 ;;		On exit  : 17F/0
  1560 ;;		Unchanged: FFE80/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1562 ;;      Params:         0       0       0       0
  1563 ;;      Locals:         0       0       0       0
  1564 ;;      Temps:          0       0       0       0
  1565 ;;      Totals:         0       0       0       0
  1566 ;;Total ram usage:        0 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    1
  1569 ;; This function calls:
  1570 ;;		Nothing
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575  02FA                     _init_setup:	
  1576                           
  1577                           ;main.c: 165: CMCON = 7;
  1578                           
  1579                           ; Regs used in _init_setup: [wreg+status,2]
  1580  02FA  3007               	movlw	7
  1581  02FB  009F               	movwf	31	;volatile
  1582                           
  1583                           ;main.c: 166: CCP1CON = 0;
  1584  02FC  0197               	clrf	23	;volatile
  1585                           
  1586                           ;main.c: 167: INTCON = 0;
  1587  02FD  018B               	clrf	11	;volatile
  1588                           
  1589                           ;main.c: 168: PEIE = 1;
  1590  02FE  170B               	bsf	11,6
  1591                           
  1592                           ;main.c: 169: GIE = 1;
  1593  02FF  178B               	bsf	11,7
  1594                           
  1595                           ;main.c: 172: PR2 = 249;
  1596  0300  30F9               	movlw	249
  1597  0301  1683               	bsf	3,5	;RP0=1, select bank1
  1598  0302  0092               	movwf	18	;volatile
  1599                           
  1600                           ;main.c: 173: T2CON = 5;
  1601  0303  3005               	movlw	5
  1602  0304  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0305  0092               	movwf	18	;volatile
  1604                           
  1605                           ;main.c: 174: TMR2IE = 1;
  1606  0306  1683               	bsf	3,5	;RP0=1, select bank1
  1607  0307  148C               	bsf	12,1
  1608                           
  1609                           ;main.c: 175: PEIE = 1;
  1610  0308  170B               	bsf	11,6
  1611                           
  1612                           ;main.c: 176: GIE = 1;
  1613  0309  178B               	bsf	11,7
  1614                           
  1615                           ;main.c: 178: TRISA = 0x24;
  1616  030A  3024               	movlw	36
  1617  030B  0085               	movwf	5	;volatile
  1618                           
  1619                           ;main.c: 179: TRISB = 0;
  1620  030C  0186               	clrf	6	;volatile
  1621                           
  1622                           ;main.c: 181: RA1 = 1;
  1623  030D  1283               	bcf	3,5	;RP0=0, select bank0
  1624  030E  1485               	bsf	5,1
  1625                           
  1626                           ;main.c: 182: RB7 = 1;
  1627  030F  1786               	bsf	6,7
  1628  0310  0008               	return
  1629  0311                     __end_of_init_setup:	
  1630                           
  1631                           	psect	text239
  1632  01A9                     __ptext239:	
  1633 ;; =============== function _init_setup ends ============
  1634                           
  1635                           
  1636 ;; *************** function _isr *****************
  1637 ;; Defined at:
  1638 ;;		line 43 in file "C:\Users\DPTP\Dropbox\PIC_Programozas\P16F628\SMD_RGB_binaris_ora\main.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  2  346[COMMON] int 
  1645 ;; Registers used:
  1646 ;;		wreg, status,2, status,0
  1647 ;; Tracked objects:
  1648 ;;		On entry : 0/0
  1649 ;;		On exit  : 60/0
  1650 ;;		Unchanged: FFF9F/0
  1651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1652 ;;      Params:         0       0       0       0
  1653 ;;      Locals:         0       0       0       0
  1654 ;;      Temps:          2       0       0       0
  1655 ;;      Totals:         2       0       0       0
  1656 ;;Total ram usage:        2 bytes
  1657 ;; Hardware stack levels used:    1
  1658 ;; This function calls:
  1659 ;;		Nothing
  1660 ;; This function is called by:
  1661 ;;		Interrupt level 1
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664  01A9                     _isr:	
  1665                           
  1666                           ;main.c: 44: timer_count++;
  1667  01A9  0AFA               	incf	_timer_count,f
  1668  01AA  1903               	skipnz
  1669  01AB  0AFB               	incf	_timer_count+1,f
  1670                           
  1671                           ;main.c: 45: if(timer_count == 1000){
  1672  01AC  087B               	movf	_timer_count+1,w
  1673  01AD  3A03               	xorlw	3
  1674  01AE  30E8               	movlw	232
  1675  01AF  1903               	skipnz
  1676  01B0  067A               	xorwf	_timer_count,w
  1677  01B1  1D03               	skipz
  1678  01B2  29E9               	goto	i1l1151
  1679                           
  1680                           ;main.c: 46: timer_count = 0;
  1681  01B3  01FA               	clrf	_timer_count
  1682  01B4  01FB               	clrf	_timer_count+1
  1683                           
  1684                           ;main.c: 47: if(mp_1<9){
  1685  01B5  3009               	movlw	9
  1686  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1687  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1688  01B8  0243               	subwf	_mp_1,w
  1689  01B9  1803               	skipnc
  1690  01BA  29BD               	goto	i1l1117
  1691                           
  1692                           ;main.c: 48: mp_1++;
  1693  01BB  0AC3               	incf	_mp_1,f
  1694                           
  1695                           ;main.c: 49: }else{
  1696  01BC  29DB               	goto	i1l1145
  1697  01BD                     i1l1117:	
  1698                           
  1699                           ;main.c: 50: mp_1 = 0;
  1700  01BD  01C3               	clrf	_mp_1
  1701                           
  1702                           ;main.c: 52: if(mp_10<5){
  1703  01BE  3005               	movlw	5
  1704  01BF  0244               	subwf	_mp_10,w
  1705  01C0  1803               	skipnc
  1706  01C1  29C4               	goto	i1l1123
  1707                           
  1708                           ;main.c: 53: mp_10++;
  1709  01C2  0AC4               	incf	_mp_10,f
  1710                           
  1711                           ;main.c: 54: }else{
  1712  01C3  29DB               	goto	i1l1145
  1713  01C4                     i1l1123:	
  1714                           
  1715                           ;main.c: 55: mp_10 = 0;
  1716  01C4  01C4               	clrf	_mp_10
  1717                           
  1718                           ;main.c: 57: if(perc_1<9){
  1719  01C5  3009               	movlw	9
  1720  01C6  0247               	subwf	_perc_1,w
  1721  01C7  1803               	skipnc
  1722  01C8  29CB               	goto	i1l1129
  1723                           
  1724                           ;main.c: 58: perc_1++;
  1725  01C9  0AC7               	incf	_perc_1,f
  1726                           
  1727                           ;main.c: 59: }else{
  1728  01CA  29DB               	goto	i1l1145
  1729  01CB                     i1l1129:	
  1730                           
  1731                           ;main.c: 60: perc_1 = 0;
  1732  01CB  01C7               	clrf	_perc_1
  1733                           
  1734                           ;main.c: 62: if(perc_10<5){
  1735  01CC  3005               	movlw	5
  1736  01CD  0248               	subwf	_perc_10,w
  1737  01CE  1803               	skipnc
  1738  01CF  29D2               	goto	i1l1135
  1739                           
  1740                           ;main.c: 63: perc_10++;
  1741  01D0  0AC8               	incf	_perc_10,f
  1742                           
  1743                           ;main.c: 64: }else{
  1744  01D1  29DB               	goto	i1l1145
  1745  01D2                     i1l1135:	
  1746                           
  1747                           ;main.c: 65: perc_10 = 0;
  1748  01D2  01C8               	clrf	_perc_10
  1749                           
  1750                           ;main.c: 67: if(ora_1<9){
  1751  01D3  3009               	movlw	9
  1752  01D4  0245               	subwf	_ora_1,w
  1753  01D5  1803               	skipnc
  1754  01D6  29D9               	goto	i1l1141
  1755                           
  1756                           ;main.c: 68: ora_1++;
  1757  01D7  0AC5               	incf	_ora_1,f
  1758                           
  1759                           ;main.c: 69: }else{
  1760  01D8  29DB               	goto	i1l1145
  1761  01D9                     i1l1141:	
  1762                           
  1763                           ;main.c: 70: ora_1 = 0;
  1764  01D9  01C5               	clrf	_ora_1
  1765                           
  1766                           ;main.c: 71: ora_10++;
  1767  01DA  0AC6               	incf	_ora_10,f
  1768  01DB                     i1l1145:	
  1769                           
  1770                           ;main.c: 72: }
  1771                           ;main.c: 73: }
  1772                           ;main.c: 74: }
  1773                           ;main.c: 75: }
  1774                           ;main.c: 76: }
  1775                           ;main.c: 77: if(ora_10==2 & ora_1==4){
  1776  01DB  0846               	movf	_ora_10,w
  1777  01DC  3A02               	xorlw	2
  1778  01DD  1D03               	skipz
  1779  01DE  29E9               	goto	i1l1151
  1780  01DF  0845               	movf	_ora_1,w
  1781  01E0  3A04               	xorlw	4
  1782  01E1  1D03               	skipz
  1783  01E2  29E9               	goto	i1l1151
  1784                           
  1785                           ;main.c: 78: ora_10 = 0;
  1786  01E3  01C6               	clrf	_ora_10
  1787                           
  1788                           ;main.c: 79: ora_1 = 0;
  1789  01E4  01C5               	clrf	_ora_1
  1790                           
  1791                           ;main.c: 80: perc_10 = 0;
  1792  01E5  01C8               	clrf	_perc_10
  1793                           
  1794                           ;main.c: 81: perc_1 = 0;
  1795  01E6  01C7               	clrf	_perc_1
  1796                           
  1797                           ;main.c: 82: mp_10 = 0;
  1798  01E7  01C4               	clrf	_mp_10
  1799                           
  1800                           ;main.c: 83: mp_1 = 0;
  1801  01E8  01C3               	clrf	_mp_1
  1802  01E9                     i1l1151:	
  1803                           
  1804                           ;main.c: 84: }
  1805                           ;main.c: 85: }
  1806                           ;main.c: 86: TMR2IF = 0;
  1807  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1808  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1809  01EB  108C               	bcf	12,1
  1810  01EC  0871               	movf	??_isr+1,w
  1811  01ED  008A               	movwf	10
  1812  01EE  0870               	movf	??_isr,w
  1813  01EF  0083               	movwf	3
  1814  01F0  0EFE               	swapf	126,f
  1815  01F1  0E7E               	swapf	126,w
  1816  01F2  0009               	retfie
  1817  01F3                     __end_of_isr:	
  1818                           
  1819                           	psect	intentry
  1820  0004                     __pintentry:	
  1821                           ; Regs used in _isr: [wreg+status,2+status,0]
  1822                           
  1823  0004                     interrupt_function:	
  1824  007E                     saved_w	set	btemp
  1825  0004  00FE               	movwf	btemp
  1826  0005  0803               	movf	3,w
  1827  0006  00F0               	movwf	??_isr
  1828  0007  080A               	movf	10,w
  1829  0008  00F1               	movwf	??_isr+1
  1830  0009  29A9               	ljmp	_isr
  1831                           
  1832                           	psect	text240
  1833  0000                     __ptext240:	
  1834 ;; =============== function _isr ends ============
  1835                           
  1836  007E                     btemp	set	126	;btemp
  1837  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.71a build 6446 
Symbol Table                                                                                   Tue Apr 14 11:10:06 2015

                 l411 022A                   l412 0231                   l414 0000                   l407 0219  
                 l424 0000                   l512 02AF                   l417 0000                   l515 0000  
                 l427 0278                   l371 0021                   l363 001F                   l428 0000  
                 l380 0050                   l364 0010                   l382 0193                   l397 0000  
                 l655 0000                   _GIE 005F                   _RA0 0028                   _RA1 0029  
                 _RA2 002A                   _RA3 002B                   _RA5 002D                   _RB7 0037  
                 _PR2 0092                   u594 0212                   u595 0210                   u995 0257  
                 _isr 01A9          ___awmod@sign 0029                  l1211 022C                  l1205 0000  
                l1215 0000                  l1223 02C5                  l1161 0000                  l1153 0000  
                l1217 0000                  l1225 0000                  l1171 0000                  l1163 0000  
                l1155 0000                  l1219 0000                  l1411 0251                  l1403 0245  
                l1173 0000                  l1165 0000                  l1157 0000                  l1181 01FC  
                l1421 0000                  l1501 0000                  l1167 0000                  l1159 0000  
                l1191 0000                  l1175 0000                  l1423 026C                  l1271 0000  
                l1511 00EE                  l1503 00B9                  l1431 0000                  l1169 0000  
                l1193 020B                  l1417 0000                  l1433 000C                  l1187 0203  
                l1179 01F9                  l1419 0264                  l1267 0000                  l1427 0000  
                l1531 0000                  l1523 0000                  l1515 0000                  l1507 0000  
                l1443 0000                  l1533 0000                  l1525 0000                  l1517 0000  
                l1509 0000                  l1453 0000                  l1445 0000                  l1199 020C  
                l1391 0000                  l1535 0000                  l1527 0158                  l1519 0123  
                l1471 0000                  l1439 0000                  l1393 0000                  l1537 0000  
                l1481 0000                  l1457 0000                  l1465 0034                  l1491 0000  
                l1483 0000                  l1459 0000                  l1397 0000                  l1493 0000  
                l1477 0043                  l1469 0040                  l1399 023E                  l1495 0086  
                l1487 0000                  l1479 0000                  l1497 0000                  l1499 0000  
                ?_isr 0070                  u1207 0080                  u1217 00B3                  u1227 00E8  
                u1237 011D                  u1247 0152                  u1257 0187                  u1267 0195  
                u1277 01A3                  _PEIE 005E                  _mp_1 0043                  _main 000B  
                _rand 0271                  btemp 007E                  start 000A    __size_of_SR74HC595 0041  
               ??_isr 0070                 ?_main 0070                 ?_rand 002A       __end_of___awmod 0271  
               _CMCON 001F                 _T2CON 0012                 i1l359 0000                 _PORTB 0006  
               _TRISA 0085                 _TRISB 0086   ___lmul@multiplicand 0076          main@randszam 003E  
               _mp_10 0044                 _ora_1 0045                 _randf 0049                 _randx 003F  
               _srand 0320                 main@i 003D                 pclath 000A                 status 0003  
               wtemp0 007E          __end_of_main 01A9          __end_of_rand 02AB          ?_random_szam 0030  
              ??_main 0034                ??_rand 002C     __end_of_SR74HC595 0234                ?_srand 0072  
              i1l1113 0000                i1l1131 0000                i1l1123 01C4                i1l1107 0000  
              i1l1141 01D9                i1l1125 0000                i1l1117 01BD                i1l1109 0000  
              i1l1143 0000                i1l1135 01D2                i1l1119 0000                i1l1151 01E9  
              i1l1137 0000                i1l1129 01CB                i1l1145 01DB                _INTCON 000B  
              _TMR2IE 0461                _TMR2IF 0061     random_szam@meddig 0032     random_szam@mettol 0030  
              ___lmul 02AB             ??___awmod 007A                _ora_10 0046                _perc_1 0047  
     ___awmod@divisor 0024       ___awmod@counter 0028                saved_w 007E                srand@x 0072  
      __pcstackCOMMON 0070         __end_of_srand 0329               ??_srand 0074            __pbssBANK0 003F  
          __pmaintext 000B               ?___lmul 0072            __pintentry 0004               _CCP1CON 0017  
      ___lmul@product 0020        SR74HC595@shift 0075  __size_of_random_szam 001C       __size_of___lmul 0033  
             ___awmod 0234            _init_setup 02FA               _perc_10 0048          __size_of_isr 004A  
    ___awmod@dividend 0026  end_of_initialization 031E             _SR74HC595 01F3            ?_SR74HC595 0072  
      __end_of___lmul 02DE           ?_init_setup 0070   start_initialization 0311           __end_of_isr 01F3  
          SR74HC595@i 0077              ??___lmul 007A           __pbssCOMMON 007A         __pcstackBANK0 0020  
         ??_SR74HC595 0074   __size_of_init_setup 0017         SR74HC595@ADAT 0076         ??_random_szam 007A  
           __ptext231 0000             __ptext240 0000             __ptext232 02DE             __ptext233 0271  
           __ptext234 0234             __ptext235 02AB             __ptext236 0320             __ptext237 01F3  
           __ptext238 02FA             __ptext239 01A9              ?___awmod 0024         SR74HC595@szin 0072  
      __size_of_srand 0009     interrupt_function 0004   __end_of_random_szam 02FA     ___lmul@multiplier 0072  
    __size_of___awmod 003D          ??_init_setup 0072              _main$216 003B         __size_of_main 019E  
       __size_of_rand 003A    __end_of_init_setup 0311           _random_szam 02DE              intlevel1 0000  
         _timer_count 007A  
